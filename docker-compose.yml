services:
  # Infrastructure
  postgres:
    image: postgres:15.4
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s

  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"

  # Kafka (KRaft) and UI
  kafka:
    image: bitnami/kafka:4.0.0
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_KRAFT_CLUSTER_ID=q1w2e3r4t5y6u7i8o9p0aa
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list > /dev/null 2>&1"]
      interval: 5s
      timeout: 3s
      retries: 60
      start_period: 10s

  # One-shot сервис для декларативного провижена топиков (best practice для dev/stage)
  topics-init:
    image: bitnami/kafka:4.0.0
    depends_on:
      - kafka
    entrypoint: ["/bin/bash","-lc"]
    command: >
      "
      for i in {1..60}; do
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list && break || sleep 2;
      done &&
      /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic orders.v1.order_created --partitions 1 --replication-factor 1 &&
      /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic inventory.v1.stock_reserved --partitions 1 --replication-factor 1 &&
      /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic inventory.v1.stock_reservation_failed --partitions 1 --replication-factor 1 &&
      /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic payments.v1.payment_processed --partitions 1 --replication-factor 1
      "
    restart: "no"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8085:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka

  # Go services with Air (hot reload)
  api-gateway:
    build:
      context: .
      dockerfile: ./services/api-gateway/Dockerfile
    working_dir: /app/services/api-gateway
    volumes:
      - .:/app
      - air_cache_api:/root/.cache
    environment:
      - REDIS_URL=${REDIS_URL}
      - FRONTEND_ORIGINS=${FRONTEND_ORIGINS}
      - USER_SERVICE_URL=${USER_SERVICE_URL}
      - ORDER_SERVICE_URL=${ORDER_SERVICE_URL}
      - INVENTORY_SERVICE_URL=${INVENTORY_SERVICE_URL}
      - PAYMENT_SERVICE_URL=${PAYMENT_SERVICE_URL}
    ports:
      - "8080:8080"
    depends_on:
      - user-service
      - order-service
      - inventory-service
      - payment-service

  user-service:
    build:
      context: .
      dockerfile: ./services/user-service/Dockerfile
    working_dir: /app/services/user-service
    volumes:
      - .:/app
      - air_cache_user:/root/.cache
    environment:
      - HTTP_PORT=${USER_SERVICE_HTTP_PORT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=${REDIS_URL}
    ports:
      - "50051:50051"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  order-service:
    build:
      context: .
      dockerfile: ./services/order-service/Dockerfile
    working_dir: /app/services/order-service
    volumes:
      - .:/app
      - air_cache_order:/root/.cache
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=${REDIS_URL}
      - KAFKA_BROKERS=${KAFKA_BROKERS}
      - AUTO_MIGRATE=true
      - INVENTORY_SERVICE_URL=inventory-service:50053
    ports:
      - "50052:50052"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_healthy
      topics-init:
        condition: service_completed_successfully

  inventory-service:
    build:
      context: .
      dockerfile: ./services/inventory-service/Dockerfile
    working_dir: /app/services/inventory-service
    volumes:
      - .:/app
      - air_cache_inventory:/root/.cache
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=${REDIS_URL}
      - KAFKA_BROKERS=${KAFKA_BROKERS}
      - AUTO_MIGRATE=true
    ports:
      - "50053:50053"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_healthy
      topics-init:
        condition: service_completed_successfully

  payment-service:
    build:
      context: .
      dockerfile: ./services/payment-service/Dockerfile
    working_dir: /app/services/payment-service
    volumes:
      - .:/app
      - air_cache_payment:/root/.cache
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=${REDIS_URL}
      - KAFKA_BROKERS=${KAFKA_BROKERS}
    ports:
      - "50054:50054"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_healthy
      topics-init:
        condition: service_completed_successfully

  # Frontend (Vite dev server)
  frontend:
    image: node:22-alpine
    working_dir: /app
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      VITE_API_URL: ${VITE_API_URL}
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
    command: sh -c "if [ -f package-lock.json ]; then npm ci --no-audit --no-fund --legacy-peer-deps; else npm install --no-audit --no-fund --legacy-peer-deps; fi && npm run dev"
    ports:
      - "3001:3000"
    depends_on:
      - api-gateway

volumes:
  postgres_data:
  kafka_data:
  air_cache_api:
  air_cache_user:
  air_cache_order:
  air_cache_payment:
  air_cache_inventory: