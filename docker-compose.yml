services:
  # Infrastructure
  postgres:
    image: postgres:15.4
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s

  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 5s

  # Kafka (KRaft) and UI
  kafka:
    image: bitnami/kafka:4.0.0
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=${KAFKA_ADVERTISED_LISTENERS}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_KRAFT_CLUSTER_ID=${KAFKA_KRAFT_CLUSTER_ID}
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    volumes:
      - kafka_data:/bitnami/kafka
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list > /dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8085:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=${KAFKA_CLUSTER_NAME}
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy

  # Go services with Air (hot reload)
  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    working_dir: /app/services/api-gateway
    volumes:
      - .:/app
      - air_cache_api:/root/.cache
    command: ["air", "-c", ".air.toml"]
    environment:
      - REDIS_URL=${REDIS_URL}
      - FRONTEND_ORIGINS=${FRONTEND_ORIGINS}
      - USER_SERVICE_URL=${USER_SERVICE_URL}
      - ORDER_SERVICE_URL=${ORDER_SERVICE_URL}
      - INVENTORY_SERVICE_URL=${INVENTORY_SERVICE_URL}
      - PAYMENT_SERVICE_URL=${PAYMENT_SERVICE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
    ports:
      - "8080:8080"
      - "8081:8081"
    restart: unless-stopped
    depends_on:
      user-service:
        condition: service_started
      order-service:
        condition: service_started
      inventory-service:
        condition: service_started
      payment-service:
        condition: service_started

  user-service:
    build:
      context: .
      dockerfile: services/user-service/Dockerfile
    working_dir: /app/services/user-service
    volumes:
      - .:/app
      - air_cache_user:/root/.cache
    command: ["air", "-c", ".air.toml"]
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - ACCESS_TOKEN_TTL=${ACCESS_TOKEN_TTL}
      - REFRESH_TOKEN_TTL=${REFRESH_TOKEN_TTL}
      - METRICS_PORT=9091
      - AUTO_MIGRATE=true
    ports:
      - "50051:50051"
      - "9091:9091"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  order-service:
    build:
      context: .
      dockerfile: services/order-service/Dockerfile
    working_dir: /app/services/order-service
    volumes:
      - .:/app
      - air_cache_order:/root/.cache
    command: ["air", "-c", ".air.toml"]
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=${REDIS_URL}
      - KAFKA_BROKERS=${KAFKA_BROKERS}
      - AUTO_MIGRATE=true
      - INVENTORY_SERVICE_URL=${INVENTORY_SERVICE_URL}
      - METRICS_PORT=9095
    ports:
      - "50052:50052"
      - "9095:9095"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  inventory-service:
    build:
      context: .
      dockerfile: services/inventory-service/Dockerfile
    working_dir: /app/services/inventory-service
    volumes:
      - .:/app
      - air_cache_inventory:/root/.cache
    command: ["air", "-c", ".air.toml"]
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=${REDIS_URL}
      - KAFKA_BROKERS=${KAFKA_BROKERS}
      - AUTO_MIGRATE=true
      - METRICS_PORT=9096
    ports:
      - "50053:50053"
      - "9096:9096"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  payment-service:
    build:
      context: .
      dockerfile: services/payment-service/Dockerfile
    working_dir: /app/services/payment-service
    volumes:
      - .:/app
      - air_cache_payment:/root/.cache
    command: ["air", "-c", ".air.toml"]
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=${REDIS_URL}
      - KAFKA_BROKERS=${KAFKA_BROKERS}
      - METRICS_PORT=9097
    ports:
      - "50054:50054"
      - "9097:9097"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  # Frontend (Vite dev server)
  frontend:
    image: node:22-alpine
    working_dir: /app
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      VITE_API_URL: ${VITE_API_URL}
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
    command: sh ./docker-entrypoint.sh
    ports:
      - "3001:3000"
    restart: unless-stopped
    depends_on:
      - api-gateway

  # Monitoring
  prometheus:
    image: prom/prometheus:v2.48.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    depends_on:
      user-service:
        condition: service_started
      api-gateway:
        condition: service_started

  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    depends_on:
      prometheus:
        condition: service_started

volumes:
  postgres_data:
  kafka_data:
  air_cache_api:
  air_cache_user:
  air_cache_order:
  air_cache_payment:
  air_cache_inventory:
  prometheus_data:
  grafana_data: